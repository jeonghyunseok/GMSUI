/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-07-27 23:31:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.util;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;

public final class update_005femail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public static final String ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
public static final String ORACLE_URL = "jdbc:oracle:thin:@localhost:1521:xe";
public static final String DB2_DRIVER = "";
public static final String DB2_URL = "";
public static final String MYSQL_DRIVER = "";
public static final String MYSQL_URL = "";
public static final String MSSQL_DRIVER = "";
public static final String MSSQL_URL = "";
public static final String MARIADB_DRIVER = "";
public static final String MARIADB_URL = "";
public static final String USERNAME = "hanbit";
public static final String PASSWORD = "hanbit";
public static final String TABLE_MEMBER = "Member";
public static final String MEMBER_ID = "id";
public static final String MEMBER_PASSWORD = "password";
public static final String MEMBER_NAME = "name";
public static final String MEMBER_SSN = "ssn";
public static final String MEMBER_REGDATE = "regdate";
public static final String TABLE_BOARD = "Board";
public static final String BOARD_ARTICLE_SEQ = "article_seq";
public static final String BOARD_ID = "id";
public static final String BOARD_TITLE = "title";
public static final String BOARD_CONTENT = "content";
public static final String BOARD_REGDATE = "regdate";
public static final String BOARD_HITCOUNT = "hitcount";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/util/../constants/db.jsp", Long.valueOf(1501142403585L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

Class.forName(ORACLE_DRIVER);
String sql="SELECT id FROM Member";
PreparedStatement pstmt = null;
 pstmt = DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
ResultSet rs = pstmt.executeQuery();
List<String> list = new ArrayList<>();
while (rs.next()){
	list.add(rs.getString("id"));
}
int result=0;
for(int i=0;i<list.size();i++){
	Class.forName(ORACLE_DRIVER);
	String email= list.get(i)+"@test.com";
	sql="UPDATE Member SET email=? WHERE id=?";
	pstmt = DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
		pstmt.setString(1, email);
		pstmt.setString(2, list.get(i));
		result=pstmt.executeUpdate();
}
if(result==1){
	
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("alert('이메일 수정 완료');\r\n");
      out.write("location.herf=\"");
      out.print(request.getContextPath());
      out.write("\"/index.jsp;\r\n");
      out.write("\t</script>\r\n");
 
	}
else{
	
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("alert('이메일 수정 실패');\r\n");
      out.write("location.herf=\"");
      out.print(request.getContextPath());
      out.write("\"/index.jsp;\r\n");
      out.write("</script>\r\n");
 
	
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
