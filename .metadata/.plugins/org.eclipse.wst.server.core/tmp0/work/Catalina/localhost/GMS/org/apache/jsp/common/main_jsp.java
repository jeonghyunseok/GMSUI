/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-07-28 08:22:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import oracle.jdbc.driver.DBConversion;
import oracle.jdbc.driver.OracleDriver;
import javafx.scene.control.Alert;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.*;
import java.sql.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
public String headroot(HttpServletRequest request){
	return request.getContextPath();
}


public static final String ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
public static final String ORACLE_URL = "jdbc:oracle:thin:@localhost:1521:xe";
public static final String DB2_DRIVER = "";
public static final String DB2_URL = "";
public static final String MYSQL_DRIVER = "";
public static final String MYSQL_URL = "";
public static final String MSSQL_DRIVER = "";
public static final String MSSQL_URL = "";
public static final String MARIADB_DRIVER = "";
public static final String MARIADB_URL = "";
public static final String USERNAME = "hanbit";
public static final String PASSWORD = "hanbit";
public static final String TABLE_MEMBER = "Member";
public static final String MEMBER_ID = "id";
public static final String MEMBER_PASSWORD = "password";
public static final String MEMBER_NAME = "name";
public static final String MEMBER_SSN = "ssn";
public static final String MEMBER_REGDATE = "regdate";
public static final String TABLE_BOARD = "Board";
public static final String BOARD_ARTICLE_SEQ = "article_seq";
public static final String BOARD_ID = "id";
public static final String BOARD_TITLE = "title";
public static final String BOARD_CONTENT = "content";
public static final String BOARD_REGDATE = "regdate";
public static final String BOARD_HITCOUNT = "hitcount";

public String getSpec(HttpServletRequest request) {
       String name = request.getParameter("name");
       String gender = request.getParameter("gender");
       String birth = request.getParameter("birthday"); // 4자리 연도 숫자
       String id = request.getParameter("id");
       String password = request.getParameter("password");
       String email = request.getParameter("email");
       String major = request.getParameter("major");
       String age = String.valueOf(Integer.parseInt(new SimpleDateFormat("yyyy").format(new Date())) - Integer.parseInt(birth));
       String spec = String.format("이름 : %s/성별 : %s/나이 : %s세/아이디 : %s/ 비밀번호 : %s/ 이메일 : %s/ 전공 : %s" ,name, gender, age, id, password, email, major);
       return spec;
    }   
public String root(HttpServletRequest request){
	return request.getContextPath();
}
public Map<String,String> getDetail(HttpServletRequest request){
	Map<String,String> map = new HashMap<>();
	try{
	Class.forName(ORACLE_DRIVER);
	String sql="SELECT * FROM Member WHERE id=?";
	String id= request.getParameter("id");
	PreparedStatement pstmt = DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
	pstmt.setString(1, id);
	ResultSet rs= pstmt.executeQuery();
	if(rs.next()){	
		map.put("id",rs.getString("id"));
		map.put("name",rs.getString("name"));
		map.put("password",rs.getString("password"));
		map.put("ssn",rs.getString("ssn"));
		map.put("regdate",rs.getString("regdate"));
		map.put("phone",rs.getString("phone"));
		map.put("email",rs.getString("email"));
		map.put("major_id",rs.getString("major_id"));
		map.put("profile",rs.getString("profile"));
		}
}catch(Exception ex){
	}
 return map;
}
public List<Map<String,String>>list(HttpServletRequest request){
	List<Map<String,String>>list=new ArrayList<>();
	Map<String,String> map = null;
	try{
	Class.forName(ORACLE_DRIVER);
	PreparedStatement pstmt=null;
	if(request.getParameter("action").equals("list")){
	   pstmt=DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement("SELECT * FROM Member");
	}else{
	   String name=request.getParameter("name");
	   pstmt=DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement("SELECT * FROM Member WHERE name=?");
	   pstmt.setString(1, name);
	}
	ResultSet rs=pstmt.executeQuery();
		while(rs.next()){
			map= new HashMap<>();
			map.put("id",rs.getString("id"));
			map.put("name",rs.getString("name"));
			map.put("email",rs.getString("email"));
			map.put("major_id",rs.getString("major_id"));
			map.put("phone",rs.getString("phone"));
			map.put("regdate",rs.getString("regdate"));
			list.add(map);}
	}catch(Exception ex){
	}
 return list;
}
public Map<String,String> getAdd(HttpServletRequest request){
	Map<String,String> map = new HashMap<>();
	try{
		Class.forName(ORACLE_DRIVER);
	String id=request.getParameter("id");
	String password=request.getParameter("password");
	String name=request.getParameter("name");
	String ssn=request.getParameter("ssn");
	String phone=request.getParameter("phone");
	String email=request.getParameter("email");
	String major_id=request.getParameter("major_id");
	String sql="INSERT INTO Member(id, password, name, ssn, regdate, phone, email, major_id, profile) VALUES(?,?,?,?,SYSDATE,?,?,?,'defaultimg.jpg')";
	PreparedStatement pstmt= DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
	pstmt.setString(1, id);
	pstmt.setString(2, password);
	pstmt.setString(3, name);
	pstmt.setString(4, ssn);
	pstmt.setString(5, phone);
	pstmt.setString(6, email);
	pstmt.setString(7, major_id);
	ResultSet rs= pstmt.executeQuery();
	if(rs.next()){	
		map.put("id",rs.getString("id"));
		map.put("name",rs.getString("name"));
		map.put("password",rs.getString("password"));
		map.put("ssn",rs.getString("ssn"));
		map.put("regdate",rs.getString("regdate"));
		map.put("phone",rs.getString("phone"));
		map.put("email",rs.getString("email"));
		map.put("major_id",rs.getString("major_id"));
		map.put("profile",rs.getString("profile"));
		}
}catch(Exception ex){
	}
 return map;
}
public int getDelete(HttpServletRequest request){
	int rs=0;
	String id=request.getParameter("id");
	try{
		Class.forName(ORACLE_DRIVER);
		String sql="DELETE FROM Member WHERE id=?";
		PreparedStatement pstmt= DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
		pstmt.setString(1, id);
		rs= pstmt.executeUpdate();
	}
	catch(Exception ex){
	}
	 return rs;
	}
public int getUpdate(HttpServletRequest request){
	int rs=0;
	try{
	Class.forName(ORACLE_DRIVER);
	Map<String,String>map=new HashMap<>();
	String sql="UPDATE Member SET major_id=?, phone=? WHERE id=?";
	String id=request.getParameter("id");
	map=getDetail(request);
	PreparedStatement pstmt = DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
	pstmt.setString(1, request.getParameter("major_id").equals("")?map.get("major_id"):request.getParameter("major_id"));
	pstmt.setString(2, request.getParameter("phone").equals("")?map.get("phone"):request.getParameter("phone"));
	pstmt.setString(3, request.getParameter("id"));
	rs=pstmt.executeUpdate();
	}
	catch(Exception ex){
		
	}
	return rs;
}
public Map<String,String> getMain(HttpServletRequest request){
	Map<String,String> map = new HashMap<>();
	try{
		Class.forName(ORACLE_DRIVER);
		String id=request.getParameter("id");
		String password=request.getParameter("password");
		String sql="SELECT id, password FROM Member WHERE id=?";
		PreparedStatement pstmt= DriverManager.getConnection(ORACLE_URL, USERNAME, PASSWORD).prepareStatement(sql);
		pstmt.setString(1,id);
		ResultSet rs=pstmt.executeQuery();
		if(rs.next()){	
			map.put("id",rs.getString("id"));
			map.put("password",rs.getString("password"));
				}
	}catch(Exception ex){
		}
	 return map;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/common/../common/footer.jsp", Long.valueOf(1501203662347L));
    _jspx_dependants.put("/common/../member/../common/common_service.jsp", Long.valueOf(1500977525943L));
    _jspx_dependants.put("/common/../member/member_head.jsp", Long.valueOf(1501198021288L));
    _jspx_dependants.put("/common/../member/../constants/db.jsp", Long.valueOf(1501142403585L));
    _jspx_dependants.put("/common/../member/member_service.jsp", Long.valueOf(1501230146980L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javafx.scene.control.Alert");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("oracle.jdbc.driver.DBConversion");
    _jspx_imports_classes.add("oracle.jdbc.driver.OracleDriver");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("  \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" name=\"viewport\"\r\n");
      out.write("\tcontent=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Student detail</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(headroot(request));
      out.write("/css/member.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"wrapper\">\r\n");
      out.write("\t\t<header>\r\n");
      out.write("\t\t\t<h1 id=\"title\">학생 관리 </h1>\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\t<a id=\"go_main\" href=\"");
      out.print(headroot(request));
      out.write("/index.jsp\">메인으로 가기</a><br />\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

Map<String,String> map =getMain(request);
if(request.getParameter("id").equals(map.get("id"))){	
		if(request.getParameter("password").equals(map.get("password"))){
	
      out.write("\r\n");
      out.write("\t\t<div id=\"container\">\r\n");
      out.write("\t   <button class=\"gms-index-button\" onclick=\"window.location.href='");
      out.print( headroot(request));
      out.write("/member/member_detail.jsp'\">마이페이지</button>\r\n");
      out.write("\t   <br />\r\n");
      out.write("\t   <hr>\r\n");
      out.write("\t   <table id=\"index-tab\">\r\n");
      out.write("\t      <tr id=\"main-bar\">\r\n");
      out.write("\t         <th><i class=\"glyphicon glyphicon-user\"></i>학생관리</th>\r\n");
      out.write("\t         <th><i class=\"glyphicon glyphicon-cloud\"></i>성적관리</th>\r\n");
      out.write("\t         <th><i class=\"glyphicon glyphicon-thumbs-up\"></i>게시판</th>\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t      <tr class=\"main-list\">\r\n");
      out.write("\t         <td>\r\n");
      out.write("\t         <ul class=\"index-ul\">\r\n");
      out.write("            <li ><a href=\"");
      out.print(request.getContextPath() );
      out.write("/member/member_add.jsp\">학생정보 추가</a></li>\r\n");
      out.write("            <li ><a href=\"");
      out.print(request.getContextPath() );
      out.write("/member/member_list.jsp?action=list\">학생정보 목록</a></li>\r\n");
      out.write("            <li ><a href=\"");
      out.print(request.getContextPath() );
      out.write("/member/member_search.jsp\">학생정보 검색</a></li>\r\n");
      out.write("            <li ><a href=\"");
      out.print(request.getContextPath() );
      out.write("/member/member_update.jsp\">학생정보 수정</a></li>\r\n");
      out.write("            <li ><a href=\"");
      out.print(request.getContextPath() );
      out.write("/member/member_delete.jsp\">학생정보 삭제</a></li>\r\n");
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("\t           \r\n");
      out.write("\t         </td>\r\n");
      out.write("\t         <td>\r\n");
      out.write("\t            <ul class=\"index-ul\">\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/grade/grade_add.jsp\">성적 입력</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/grade/grade_list.jsp\">성적 목록</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/grade/grade_detail.jsp\">성적 상세</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/grade/grade_update.jsp\">성적 수정</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/grade/grade_delete.jsp\">성적 삭제</a></li>\r\n");
      out.write("\t            </ul>   \r\n");
      out.write("\t         </td>\r\n");
      out.write("\t         <td>\r\n");
      out.write("\t            <ul class=\"index-ul\">\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/board/board_write.jsp\">게시글쓰기</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/board/board_list.jsp\">게시글목록</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/board/board_update.jsp\">게시글수정</a></li>\r\n");
      out.write("\t               <li><a href=\"");
      out.print( headroot(request));
      out.write("/board/board_delete.jsp\">게시글삭제</a></li>\r\n");
      out.write("\t            </ul>\r\n");
      out.write("\t         </td>\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t      <tr>\r\n");
      out.write("\t         <td></td>\r\n");
      out.write("\t         <td></td>\r\n");
      out.write("\t         <td></td>\r\n");
      out.write("\t      </tr>\r\n");
      out.write("\t   </table>\r\n");
      out.write("\t   </div>\r\n");
      out.write("\t\t");

	}else{
		
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\talert('없는 비번 입니다 회원가입하세요');\r\n");
      out.write("\tlocation.href=\"");
      out.print(headroot(request));
      out.write("/index.jsp\";\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

	}
}
else{
	
      out.write("<script>\r\n");
      out.write("alert('없는 아이디 입니다 회원가입하세요');\r\n");
      out.write("location.href=\"");
      out.print(headroot(request));
      out.write("/member/member_add.jsp\";\r\n");
      out.write("\t</script>\t\r\n");
      out.write("\t");

}

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t<footer>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t\t<p>Posted by: Hanbit</p>\r\n");
      out.write("\t\t\t\t<p>\r\n");
      out.write("\t\t\t\t\tContact information: <a href=\"mailto:someone@example.com\">\r\n");
      out.write("\t\t\t\t\t\thanbit@example.com</a>.\r\n");
      out.write("\t\t\t\t<a href=\"../jdbctest.jsp\">DB 연결테스트</a>\r\n");
      out.write("\t\t\t\t<a href=\"../util/update_email.jsp\">email 업데이트</a>\r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t</footer>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</body>\r\n");
      out.write("\t\t\t</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
