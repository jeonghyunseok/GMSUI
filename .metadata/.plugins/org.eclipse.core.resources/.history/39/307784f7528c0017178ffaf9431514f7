package com.gms.web.dao;

import java.sql.Connection;

import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.gms.web.command.Command;
import com.gms.web.constants.DB;
import com.gms.web.constants.SQL;
import com.gms.web.constants.Vendor;
import com.gms.web.domain.MajorBean;
import com.gms.web.domain.MemberBean;
import com.gms.web.domain.StudentBean;
import com.gms.web.factory.DatabaseFactory;





public class MemberDAOImpl implements MemberDAO {
	Connection conn;
	public static MemberDAOImpl getInstance() {
		return new MemberDAOImpl();
	}
	private MemberDAOImpl(){
		conn=null;
	}

	
	@Override
	public String insert(Map<?,?>map) {
		int rs = 0;
		MemberBean member=(MemberBean)map.get("member");
		
		@SuppressWarnings("unchecked")
		List<MajorBean> list =(List<MajorBean>)map.get("major");
		PreparedStatement pstmt = null;
		try {
			conn= DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD)
					.getConnection();
			conn.setAutoCommit(false);
			pstmt=conn.prepareStatement(SQL.MEMBER_INSERT);
			pstmt.setString(1, member.getId());
			pstmt.setString(2, member.getPassword());
			pstmt.setString(3, member.getName());
			pstmt.setString(4, member.getSsn());
			pstmt.setString(5, member.getPhone());
			pstmt.setString(6, member.getEmail());
			pstmt.setString(7, member.getProfile());
			System.out.println("***"+SQL.MEMBER_INSERT);
			pstmt.executeUpdate();
			System.out.println("+++");
			for(int i=0;i<list.size();i++){
			pstmt=conn.prepareStatement(SQL.MAJOR_INSERT);
			pstmt.setString(1, list.get(i).getMajor_id());
			pstmt.setString(2, list.get(i).getTitle());
			pstmt.setString(3, list.get(i).getId());
			pstmt.setString(4, list.get(i).getSubjId());
			rs=pstmt.executeUpdate();
			System.out.println("***"+SQL.MAJOR_INSERT);
			System.out.println("***"+rs);
			}
			conn.commit();
		}catch (SQLException e) {
			e.printStackTrace();
			if(conn!=null){
				try {
					conn.rollback();
				} catch (SQLException ex) {
					e.printStackTrace();
				}
			}
		}
		return String.valueOf(rs);
	}

	@Override
	public List<?> selectAll(Command cmd) {
		List<StudentBean> list = new ArrayList<>();
		try {
			conn= DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD).getConnection();
			PreparedStatement pstmt=conn.prepareStatement(SQL.STUDENT_LIST);
			pstmt.setString(1, cmd.getStartRow());
			pstmt.setString(2, cmd.getEndRow());
			ResultSet rs=pstmt.executeQuery();
			StudentBean member = null;
			while (rs.next()) {
				member = new StudentBean();
				member.setNum(rs.getString(DB.NUM));
				member.setId(rs.getString(DB.ID));
				member.setName(rs.getString(DB.MEMBER_NAME));
				member.setEmail(rs.getString(DB.EMAIL));
				member.setSsn(rs.getString(DB.MEMBER_SSN));
				member.setRegdate(rs.getString(DB.MEMBER_REGDATE));
				member.setPhone(rs.getString(DB.MEMBER_PHONE));
				member.setTitle(rs.getString(DB.TITLE));
				list.add(member);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public String count(Command cmd) {
		int count = 0;
		try {
			ResultSet rs = DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD).getConnection()
					.prepareStatement(SQL.STUDENT_COUNT).executeQuery();
			if (rs.next()) {
				count = Integer.parseInt(rs.getString("count"));
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		return String.valueOf(count);
	}

	@Override
	public StudentBean selectById(Command cmd) {
		StudentBean member = null;
		try {
			PreparedStatement pstmt = DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD)
					.getConnection().prepareStatement(SQL.MEMBER_FINDBYID);
			pstmt.setString(1, cmd.getSearch());
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				member=new StudentBean();
				member.setId(rs.getString(DB.MEMBER_ID));
				member.setName(rs.getString(DB.MEMBER_NAME));
				member.setSsn(rs.getString(DB.MEMBER_SSN));
				member.setRegdate(rs.getString(DB.MEMBER_REGDATE));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return member;
	}

	@Override
	public List<StudentBean> selectByName(Command cmd) {
		System.out.println("selectByName(멤버DAO임플)"+cmd.getSearch());
		System.out.println("selectByName(멤버DAO임플)"+cmd.getColumn());
		List<StudentBean> list = new ArrayList<>();
		try {
			PreparedStatement pstmt = DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD)
					.getConnection().prepareStatement(SQL.STUDENT_FINDNAME);
			pstmt.setString(1, ""%+cmd.getSearch()+"%");
			ResultSet rs = pstmt.executeQuery();
			StudentBean member = null;
			while (rs.next()) {
				member = new StudentBean();
				member.setId(rs.getString(DB.MEMBER_ID));
				member.setName(rs.getString(DB.MEMBER_NAME));
				member.setSsn(rs.getString(DB.MEMBER_SSN));
				member.setRegdate(rs.getString(DB.MEMBER_REGDATE));
				list.add(member);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public String update(MemberBean bean) {
		String rs = "";
		try {
			PreparedStatement pstmt = DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD)
					.getConnection().prepareStatement(SQL.MEMBER_UPDATE);
			pstmt.setString(1,bean.getPassword() );
			pstmt.setString(2,bean.getId());
					rs = String.valueOf(pstmt.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return rs;
	}

	@Override
	public String delete(Command cmd) {
		int rs = 0;
		try {
			PreparedStatement pstmt = DatabaseFactory.createDatabase(Vendor.ORACLE, DB.USERNAME, DB.PASSWORD)
					.getConnection().prepareStatement(SQL.MEMBER_DELETE);
			pstmt.setString(1, cmd.getSearch());
			rs = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return String.valueOf(rs);
	}
	
}